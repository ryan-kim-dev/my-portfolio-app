{"version":3,"file":"static/js/203.4f742f87.chunk.js","mappings":"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","sources":["components/common/SectionTitle.js","firebase.js","components/testimonials/Message.js","redux/actions.js","components/testimonials/Logout.js","components/testimonials/MessageForm.js","components/testimonials/AddMessage.js","components/testimonials/EditMessage.js","components/testimonials/DeleteMessage.js","components/testimonials/Links.js","components/testimonials/Auth.js","components/testimonials/MessageLists.js","pages/Testimonials.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nfunction SectionTitle({ title }) {\n  return (\n    <SectionTitleWrapper>\n      <SectionTitleText>{title}</SectionTitleText>\n    </SectionTitleWrapper>\n  );\n}\n\nexport default SectionTitle;\n\nconst SectionTitleWrapper = styled.div`\n  position: absolute;\n  left: 0;\n  top: 1rem;\n  transform-origin: left top;\n  transform: rotate(-90deg) translateX(-100%);\n  width: max-content;\n  height: auto;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nconst SectionTitleText = styled.h2`\n  font-family: 'Oswald', sans-serif;\n  font-weight: 400;\n  letter-spacing: 0.5rem;\n  font-size: 5rem;\n  text-transform: uppercase;\n  @media (max-width: 768px) {\n    transform: none;\n    font-size: 2.5rem;\n  }\n`;\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, GithubAuthProvider } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\n// import { getDatabase } from 'firebase/database';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\n// * 인증 사용\nexport const auth = getAuth(app);\nexport const provider = new GithubAuthProvider();\n// export const firebaseInstance = getAuth();\n// * 데이터베이스 사용\nexport const storage = getStorage(app);\nexport const db = getFirestore(app);\n","import React from 'react';\nimport styled from 'styled-components';\n\nfunction Message({ username, relation, bodyText, photoURL }) {\n  return (\n    <MsgContainer>\n      <Left>\n        <img src={photoURL} alt=\"user\" />\n        <h2>{username}</h2>\n        <span>{relation}</span>\n      </Left>\n      <Right>\n        <pre>{bodyText}</pre>\n      </Right>\n    </MsgContainer>\n  );\n}\n\nexport default Message;\n\nconst MsgContainer = styled.div`\n  position: relative;\n  display: flex;\n  width: 100%;\n  padding: 1.5rem;\n  margin-bottom: 1rem;\n  background: rgba(255, 255, 255, 0.2);\n  box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.2);\n  color: #000000;\n`;\n\nconst Left = styled.div`\n  width: 20%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 50%;\n    border-radius: 50%;\n  }\n\n  h2 {\n    font-size: 14px;\n  }\n\n  span {\n    font-size: 0.8rem;\n    color: #414141;\n  }\n`;\n\nconst Right = styled.div`\n  width: 80%;\n  font-size: 13px;\n  padding: 10px;\n`;\n","// * actions.js : action 생성자\nimport * as types from './actionTypes';\n\nimport { auth, provider } from '../firebase';\nimport {\n  signInWithPopup,\n  getAuth,\n  signOut,\n  setPersistence,\n  browserLocalPersistence,\n} from 'firebase/auth';\n\nprovider.addScope(\n  'https://62ea948909db4a0061aa95a2--neon-kleicha-5f51ad.netlify.app'\n);\n\nconst logoutStart = () => ({\n  type: types.LOGOUT_START,\n});\nconst logoutSuccess = user => ({\n  type: types.LOGOUT_SUCCESS,\n});\nconst logoutFail = error => ({\n  type: types.LOGOUT_FAIL,\n  payload: error,\n});\n\n// * 깃허브\nconst githubSignInStart = () => ({\n  type: types.GITHUB_SIGN_IN_START,\n});\nconst githubSignInSuccess = user => ({\n  type: types.GITHUB_SIGN_IN_SUCCESS,\n  payload: user,\n});\nconst githubSignInFail = error => ({\n  type: types.GITHUB_SIGN_IN_FAIL,\n  payload: error,\n});\n\nexport const setUser = user => ({\n  type: types.SET_USER,\n  payload: user,\n});\n\n// * 로그아웃 버튼 클릭시 실행\nexport const logoutInitiate = () => {\n  return async function (dispatch) {\n    dispatch(logoutStart);\n    const auth = getAuth();\n    await signOut(auth)\n      .then(res => {\n        // Sign-out successful.\n        const loginStatus = false;\n        localStorage.setItem('loginStatus', loginStatus);\n        return dispatch(logoutSuccess());\n      })\n      .catch(error => {\n        // An error happened.\n        return dispatch(logoutFail(error.message));\n      });\n  };\n};\n\n// * 깃허브 로그인 버튼 클릭시 실행\nexport const githubSignInInitiate = () => {\n  return async function (dispatch) {\n    dispatch(githubSignInStart);\n\n    await setPersistence(auth, browserLocalPersistence)\n      .then(() => {\n        return signInWithPopup(auth, provider);\n      })\n      .then(({ user }) => {\n        if (user) {\n          // console.log(user);\n          const displayName = user.displayName;\n          const photoURL = user.photoURL;\n          const uid = user.uid;\n          const loginStatus = true;\n          localStorage.setItem('displayName', displayName);\n          localStorage.setItem('photoURL', photoURL);\n          localStorage.setItem('loginStatus', loginStatus);\n          localStorage.setItem('uid', uid);\n          return dispatch(githubSignInSuccess(user));\n        }\n      })\n      .catch(error => dispatch(githubSignInFail(error.message)));\n  };\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { logoutInitiate } from '../../redux/actions';\n\nfunction Logout({ setIsLoggedIn }) {\n  const dispatch = useDispatch();\n\n  const handleAuth = async () => {\n    await dispatch(logoutInitiate());\n    window.localStorage.clear(); // 로컬스토리지 저장내용 전체삭제\n    return setIsLoggedIn(prev => false);\n  };\n\n  return <LogoutButton onClick={handleAuth}>Logout</LogoutButton>;\n}\n\nexport default Logout;\n\nconst LogoutButton = styled.div`\n  font-family: 'Oswald', sans-serif;\n  cursor: pointer;\n  border-bottom: 2px solid #000000;\n\n  &:hover {\n    color: red;\n  }\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n// 파이어페에스 db에 글 추가하기위해 import\nimport { db } from '../../firebase';\nimport { doc, setDoc, deleteDoc } from 'firebase/firestore';\n\nconst MessageForm = ({ method }) => {\n  console.log(localStorage.uid);\n\n  const [message, setMessage] = useState({\n    username: '',\n    relation: '',\n    bodyText: '',\n    photoURL: localStorage.photoURL,\n    uid: localStorage.uid,\n  });\n  const onSubmit = async e => {\n    // 참고 : https://firebase.google.com/docs/firestore/manage-data/add-data?hl=ko&authuser=0\n    e.preventDefault();\n\n    const createMessage = async () => {\n      const newRef = doc(db, 'messages', `${message.uid}`);\n      try {\n        const res = await setDoc(newRef, message);\n        console.log(res);\n        // TODO: 팝업창 닫기 props로 받아 실행시키고 새로고침 대신 모달창만 닫도록 개선할것\n        window.location.reload();\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    const updateMessage = async () => {\n      try {\n        const targetDoc = doc(db, 'messages', `${message.uid}`);\n        const res = await setDoc(targetDoc, message);\n        console.log(res);\n        // TODO: 새로고침 대신 모달창만 닫도록 개선할것\n        window.location.reload();\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    const deleteMessage = async () => {\n      try {\n        const targetDoc = doc(db, 'messages', `${message.uid}`);\n        await deleteDoc(targetDoc);\n        // TODO: 새로고침 대신 모달창만 닫도록 개선할것\n        window.location.reload();\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (method === '추가하기') {\n      return createMessage();\n    }\n\n    if (method === '수정하기') {\n      return updateMessage();\n    }\n    if (method === '삭제하기') {\n      return deleteMessage();\n    }\n  };\n\n  const onChange = e => {\n    let { name, value } = e.target;\n    setMessage(prev => ({\n      ...prev, // 기존 객체 복사 (spread)\n      [name]: value,\n      // input에 부여된 name 속성의 값을 key로, name 키를 가진 값을 value로 설정.\n      // [] 로 감싸 key 값을 동적으로 받는다.\n      // 참고 : https://kjhg478.tistory.com/27\n    }));\n  };\n\n  return (\n    <FormContainer onSubmit={onSubmit}>\n      {method === '삭제하기' ? (\n        <div>\n          <input type=\"submit\" value={method} />\n        </div>\n      ) : (\n        <>\n          <div>\n            <span>{`추천사 ${method}`}</span>\n          </div>\n          <div>\n            <Input\n              onChange={onChange}\n              type=\"text\"\n              name=\"username\"\n              placeholder=\"성함을 입력해주세요.\"\n            />\n          </div>\n          <div>\n            <Input\n              onChange={onChange}\n              type=\"text\"\n              name=\"relation\"\n              placeholder=\"관계를 입력해주세요.\"\n            />\n          </div>\n          <div>\n            <Textarea\n              onChange={onChange}\n              name=\"bodyText\"\n              placeholder=\"남겨주신 한글자 한글자가 큰 힘이 됩니다. 감사합니다!!\"\n            />\n          </div>\n          <div>\n            <Input type=\"submit\" value={method} />\n          </div>\n        </>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default MessageForm;\n\nconst FormContainer = styled.form`\n  width: 600px;\n  height: 500px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Input = styled.input`\n  width: 400px;\n`;\n\nconst Textarea = styled.textarea`\n  width: 400px;\n  height: 150px;\n`;\n","import React from 'react';\n// import styled from 'styled-components';\nimport { ModalBackdrop, ModalView } from '../../GlobalStyle';\nimport MessageForm from './MessageForm';\n\nfunction AddMessage({ isOpen, setIsOpen, handleButtonClick }) {\n  return (\n    <ModalBackdrop>\n      <ModalView onClick={e => e.stopPropagation()}>\n        <button className={'closingBtn'} onClick={() => handleButtonClick()}>\n          x\n        </button>\n        <div>\n          <MessageForm method=\"추가하기\" />\n        </div>\n      </ModalView>\n    </ModalBackdrop>\n  );\n}\n\nexport default AddMessage;\n","import React from 'react';\n// import styled from 'styled-components';\nimport { ModalBackdrop, ModalView } from '../../GlobalStyle';\nimport MessageForm from './MessageForm';\n\nfunction EditMessage({ isOpen, setIsOpen, handleButtonClick }) {\n  return (\n    <ModalBackdrop>\n      <ModalView onClick={e => e.stopPropagation()}>\n        <button className={'closingBtn'} onClick={() => handleButtonClick()}>\n          x\n        </button>\n        <div>\n          <MessageForm method={'수정하기'} />\n        </div>\n      </ModalView>\n    </ModalBackdrop>\n  );\n}\n\nexport default EditMessage;\n","import React from 'react';\n// import styled from 'styled-components';\nimport { ModalBackdrop, ModalView } from '../../GlobalStyle';\nimport MessageForm from './MessageForm';\nfunction DeleteMessage({ isOpen, setIsOpen, handleButtonClick }) {\n  return (\n    <ModalBackdrop>\n      <ModalView onClick={e => e.stopPropagation()}>\n        <button className={'closingBtn'} onClick={() => handleButtonClick()}>\n          x\n        </button>\n        <div>\n          <MessageForm method=\"삭제하기\" />\n        </div>\n      </ModalView>\n    </ModalBackdrop>\n  );\n}\n\nexport default DeleteMessage;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport AddMessage from './AddMessage';\nimport EditMessage from './EditMessage';\nimport DeleteMessage from './DeleteMessage';\nfunction Links() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [toBeOpened, setToBeOpened] = useState('');\n\n  const handleButtonClick = e => {\n    setIsOpen(!isOpen);\n\n    if (e.target.value === 'add') {\n      setToBeOpened('add');\n    }\n    if (e.target.value === 'edit') {\n      setToBeOpened('edit');\n    }\n    if (e.target.value === 'delete') {\n      setToBeOpened('delete');\n    }\n  };\n\n  return (\n    <>\n      {isOpen && toBeOpened === 'add' && (\n        <AddMessage\n          handleButtonClick={handleButtonClick}\n          isOpen={isOpen}\n          setIsOpen={setIsOpen}\n        />\n      )}\n      {isOpen && toBeOpened === 'edit' && (\n        <EditMessage\n          handleButtonClick={handleButtonClick}\n          isOpen={isOpen}\n          setIsOpen={setIsOpen}\n        />\n      )}\n      {isOpen && toBeOpened === 'delete' && (\n        <DeleteMessage\n          handleButtonClick={handleButtonClick}\n          isOpen={isOpen}\n          setIsOpen={setIsOpen}\n        />\n      )}\n      <LinkWrapper onClick={handleButtonClick}>\n        <LinkDivider>\n          <button value={'add'}>추천사 추가</button>\n        </LinkDivider>\n        <LinkDivider>\n          <button value={'edit'}>추천사 수정</button>\n        </LinkDivider>\n        <LinkDivider>\n          <button value={'delete'}>추천사 삭제</button>\n        </LinkDivider>\n      </LinkWrapper>\n    </>\n  );\n}\n\nexport default Links;\n\nconst LinkWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst LinkDivider = styled.div`\n  button {\n    border: none;\n    cursor: pointer;\n    border-radius: 70px;\n    background: rgba(255, 255, 255, 0.2);\n    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.2);\n    padding: 5px 10px;\n    margin: 5px;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { AiFillGithub } from 'react-icons/ai';\nimport { githubSignInInitiate } from '../../redux/actions';\nimport Logout from './Logout';\n// import AddMessage from './AddMessage';\nimport Links from './Links';\n// import { getAuth, onAuthStateChanged } from 'firebase/auth'; // 추가\nimport { auth } from '../../firebase';\n\nfunction Auth() {\n  const dispatch = useDispatch();\n\n  // * 로그인 상태 state\n  const [isLoggedin, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        const loginStatus = 'true';\n        localStorage.setItem('loginStatus', loginStatus);\n        setIsLoggedIn(true);\n      } else {\n        const loginStatus = 'false';\n        localStorage.setItem('loginStatus', loginStatus);\n        setIsLoggedIn(false);\n      }\n    });\n  }, []);\n\n  // * 로그인버튼\n  const handleGithubSignIn = async () => {\n    dispatch(githubSignInInitiate());\n    console.log(isLoggedin ? 'true' : 'false'); // 불필요한 코드인데 린트 에러때문에 임시로 넣음\n  };\n\n  return (\n    <AuthWrapper>\n      {localStorage.loginStatus === 'true' ? (\n        <>\n          <UserInfoArea>\n            <div>\n              <UserPic\n                crossOrigin=\"anonymous\"\n                src={localStorage.getItem('photoURL')}\n                alt=\"profile\"\n              />\n            </div>\n            <div>{localStorage.displayName}님, 반갑습니다!</div>\n          </UserInfoArea>\n          <Links />\n          <Logout setIsLoggedIn={setIsLoggedIn} />\n        </>\n      ) : (\n        <SignUpArea>\n          <LoginButton name=\"github\">\n            <ButtonTextWrapper>\n              <AiFillGithub />\n              <span onClick={handleGithubSignIn}>깃허브 로그인</span>\n            </ButtonTextWrapper>\n          </LoginButton>\n        </SignUpArea>\n      )}\n    </AuthWrapper>\n  );\n}\n\nexport default Auth;\n\nconst AuthWrapper = styled.div`\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  /* justify-content: space-between; */\n  width: max-content;\n  /* height: 50px; */\n`;\n\nconst UserInfoArea = styled.div`\n  display: flex;\n  column-gap: 0.7rem;\n`;\n\nconst UserPic = styled.img`\n  width: 30px;\n  border-radius: 50%;\n`;\n\nconst LoginButton = styled.button`\n  box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.2);\n  border-radius: 7px;\n  background: none;\n  white-space: nowrap;\n  padding: 10px 20px;\n  font-size: 16px;\n  color: #fff;\n  background-color: black;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  position: relative;\n\n  &:before {\n    background: #fff;\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: -1;\n    transition: all 0.6s ease;\n    width: 100%;\n    height: 0%;\n    transform: translate(-50%, -50%) rotate(45deg);\n  }\n  &:hover:before {\n    height: 500%;\n  }\n  &:hover {\n    background-color: lightgray;\n    color: black;\n  }\n`;\n\nconst ButtonTextWrapper = styled.div`\n  font-size: 16px;\n  svg {\n    position: relative;\n    top: 2px;\n    right: 6px;\n  }\n`;\n\nconst SignUpArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { db } from '../../firebase';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { Container } from '../../GlobalStyle';\nimport Message from './Message';\nimport SectionTitle from '../common/SectionTitle';\nimport Auth from './Auth';\nfunction MessageLists() {\n  const [messages, setMessages] = useState([]);\n  // const [index, setIndex] = useState(0);\n\n  useEffect(() => {\n    const messagesCollectionRef = collection(db, 'messages');\n    const getMessages = async () => {\n      const data = await getDocs(messagesCollectionRef);\n      console.log('db get요청 횟수 체크용');\n      setMessages(data.docs.map(doc => ({ ...doc.data(), id: doc.id })));\n    };\n    getMessages();\n  }, []);\n\n  return (\n    <ListContainer>\n      <SectionTitle title={'Testimonials'} />\n      <ListWrapper className=\"text-dark\">\n        {messages.map((message, idx) => {\n          return (\n            <Message\n              idx={idx}\n              key={message.id}\n              username={message.username}\n              relation={message.relation}\n              bodyText={message.bodyText}\n              photoURL={message.photoURL}\n            />\n          );\n        })}\n        <Auth />\n      </ListWrapper>\n    </ListContainer>\n  );\n}\n\nexport default MessageLists;\n\nconst ListContainer = styled(Container)``;\n\nconst ListWrapper = styled.div`\n  z-index: 1;\n  background: rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(40px);\n  padding: 3em;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from 'react';\nimport MessageLists from '../components/testimonials/MessageLists';\n\n// import Links from '../components/testimonials/Links';\nimport { Container } from '../GlobalStyle';\n\nconst Testimonials = () => {\n  return (\n    <Container id=\"testimonials\">\n      <MessageLists />\n    </Container>\n  );\n};\n\nexport default Testimonials;\n"],"names":["title","SectionTitleWrapper","SectionTitleText","styled","app","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","provider","GithubAuthProvider","db","getStorage","getFirestore","username","relation","bodyText","photoURL","MsgContainer","Left","src","alt","Right","addScope","logoutStart","type","types","logoutFail","error","payload","githubSignInStart","githubSignInSuccess","user","githubSignInFail","setIsLoggedIn","dispatch","useDispatch","handleAuth","signOut","then","res","localStorage","setItem","catch","message","window","clear","prev","LogoutButton","onClick","method","console","log","uid","useState","setMessage","onSubmit","e","preventDefault","createMessage","newRef","doc","setDoc","location","reload","updateMessage","targetDoc","deleteMessage","deleteDoc","onChange","target","name","value","FormContainer","Input","placeholder","Textarea","isOpen","setIsOpen","handleButtonClick","stopPropagation","className","toBeOpened","setToBeOpened","LinkWrapper","LinkDivider","isLoggedin","useEffect","onAuthStateChanged","handleGithubSignIn","setPersistence","browserLocalPersistence","signInWithPopup","displayName","AuthWrapper","loginStatus","UserInfoArea","UserPic","crossOrigin","getItem","SignUpArea","LoginButton","ButtonTextWrapper","messages","setMessages","messagesCollectionRef","collection","getMessages","getDocs","data","docs","map","id","ListContainer","SectionTitle","ListWrapper","idx","Container"],"sourceRoot":""}